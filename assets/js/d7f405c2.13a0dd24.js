"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[1544],{3881:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>i});var n=r(8101);const s={},a=n.createContext(s);function o(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(a.Provider,{value:t},e.children)}},4134:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"sdk/types/variables/NetworkId","title":"NetworkId","description":"A record that maps network names to their corresponding numeric IDs.","source":"@site/docs/sdk/types/variables/NetworkId.md","sourceDirName":"sdk/types/variables","slug":"/sdk/types/variables/NetworkId","permalink":"/docs-site/docs/sdk/types/variables/NetworkId","draft":false,"unlisted":false,"editUrl":"https://github.com/Andamio-Platform/docs-site/docs/sdk/types/variables/NetworkId.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"UtxorpcClientParams","permalink":"/docs-site/docs/sdk/types/type-aliases/UtxorpcClientParams"}}');var s=r(5105),a=r(3881);const o={},i="NetworkId",d={},c=[{value:"Remarks",id:"remarks",level:2},{value:"Example",id:"example",level:2},{value:"Type Param",id:"type-param",level:2},{value:"Type Param",id:"type-param-1",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"networkid",children:"NetworkId"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"const NetworkId: Record<Network, number>;\n"})}),"\n",(0,s.jsx)(t.p,{children:"A record that maps network names to their corresponding numeric IDs."}),"\n",(0,s.jsx)(t.h2,{id:"remarks",children:"Remarks"}),"\n",(0,s.jsx)(t.p,{children:"This constant is used to identify different network environments by their unique IDs."}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsxs)(t.p,{children:["Here's how you can use the ",(0,s.jsx)(t.code,{children:"NetworkId"})," to get the ID of the Mainnet:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"const mainnetId = NetworkId.Mainnet; // 1\n"})}),"\n",(0,s.jsx)(t.h2,{id:"type-param",children:"Type Param"}),"\n",(0,s.jsx)(t.p,{children:"The type representing the network names."}),"\n",(0,s.jsx)(t.h2,{id:"type-param-1",children:"Type Param"}),"\n",(0,s.jsx)(t.p,{children:"The type representing the network IDs."})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);